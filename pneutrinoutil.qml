import MuseScore 3.0
import QtQuick 2.2
import QtQuick.Controls 1.0
import QtQuick.Layouts 1.0

MuseScore {
  menuPath: "Plugins.pneutrinoutil"
  description: "Generate wav file by pneutrinoutil and play it"
  version: "1.0.0"
  requiresScore: true
  pluginType: "dock"
  dockArea: "left"
  id: uiPneutrinoutil

  // NOTE: rewrite the value
  property var script: "/path/to/musescore-plugins-pneutrinoutil/bin/pneutrinoutil.sh"

  QProcess {
    id: proc
  }

  // Call pneutrinoutil with appropriate arguments
  // See https://github.com/berquerant/pneutrinoutil
  function start() {
    var cmd = [
      script,
      "--workDir", workDir,
      // NOTE: normally, --score is musicxml path
      // but musicxml is generated by pneutrinoutil.sh from mscz
      "--score", curScore.path,
      "--model", model,
      "--inference", inference,
      "--formantShift", formantShift,
      "--styleShift", styleShift,
      "--enhanceBreathiness", enhanceBreathiness,
      "--pitchShiftNsf", pitchShiftNsf,
      "--pitchShiftWorld", pitchShiftWorld,
      "--smoothFormant", smoothFormant,
      "--smoothPitch", smoothPitch
    ].join(" ")
    proc.start(cmd)
  }

  onRun: { }

  function onRunClicked() {
    setParameters()
    start()
  }

  function setParameters() {
    workDir = textWorkDir.text
    model = textModel.text
    inference = textInference.text
    formantShift = textFormantShift.text
    styleShift = textStyleShift.text
    enhanceBreathiness = textEnhanceBreathiness.text
    pitchShiftNsf = textPitchShiftNsf.text
    pitchShiftWorld = textPitchShiftWorld.text
    smoothFormant = textSmoothFormant.text
    smoothPitch = textSmoothPitch.text
  }

  property var workDir: ""
  property var model : ""
  property var inference: ""
  property var formantShift: ""
  property var styleShift: ""
  property var enhanceBreathiness: ""
  property var pitchShiftNsf: ""
  property var pitchShiftWorld: ""
  property var smoothFormant: ""
  property var smoothPitch: ""

  //
  // UI elements
  //

  ColumnLayout {
    id: mainRow
    spacing: 2
    anchors.margins: 0

    GridLayout {
      anchors.fill: parent
      columns: 2
      rowSpacing: 5
      columnSpacing: 5

      // Run button
      Button {
        id: buttonRun
        text: "Run"
        onClicked: {
          onRunClicked()
        }
      }
      Label {
        id: labelEmpty
        text: ""
      }
      // WorkDir input
      Label {
        id: labelWorkDir
        text: "WorkDIr"
        color: "White"
      }
      TextField {
        id: textWorkDir
        text: "/tmp/pneutrinoutil"
      }
      // Model input
      Label {
        id: labelModel
        text: "Model"
        color: "White"
      }
      TextField {
        id: textModel
        text: "KIRITAN"
      }
      // Inference input
      Label {
        id: labelInference
        text: "Inference (2,3,4)"
        color: "White"
      }
      TextField {
        id: textInference
        text: "3"
        validator: IntValidator {bottom: 2; top: 4;}
      }
      // FormantShift input
      Label {
        id: labelFormantShift
        text: "FormantShift"
        color: "White"
      }
      TextField {
        id: textFormantShift
        text: "1.0"
        onTextChanged: {
          formantShift = textFormantShift.text
        }
      }
      // StyleShift input
      Label {
        id: labelStyleShift
        text: "StyleShift"
        color: "White"
      }
      TextField {
        id: textStyleShift
        text: "0"
      }
      // EnhanceBreathiness input
      Label {
        id: labelEnhanceBreathiness
        text: "EnhanceBreathiness [0, 100]%"
        color: "White"
      }
      TextField {
        id: textEnhanceBreathiness
        text: "0"
        validator: DoubleValidator {bottom: 0; top: 100;}
      }
      // PitchShiftNsf input
      Label {
        id: labelPitchShiftNsf
        text: "PitchShiftNsf"
        color: "White"
      }
      TextField {
        id: textPitchShiftNsf
        text: "0.0"
      }
      // PitchShiftWorld input
      Label {
        id: labelPitchShiftWorld
        text: "PitchShiftWorld"
        color: "White"
      }
      TextField {
        id: textPitchShiftWorld
        text: "0.0"
      }
      // SmoothFormant input
      Label {
        id: labelSmoothFormant
        text: "SmoothFormant [0, 100]%"
        color: "White"
      }
      TextField {
        id: textSmoothFormant
        text: "0.0"
        validator: DoubleValidator {bottom: 0; top: 100;}
      }
      // SmoothPitch input
      Label {
        id: labelSmoothPitch
        text: "SmoothPitch [0, 100]%"
        color: "White"
      }
      TextField {
        id: textSmoothPitch
        text: "0.0"
        validator: DoubleValidator {bottom: 0; top: 100;}
      }
    }
  }
}
